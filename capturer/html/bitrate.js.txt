let graphic_width=0;
let graphic_height=0;
let bitrate=new Map;
let bitrate_avg=[];
let drop_data=false;
let last_timestamp='';
let max_br=0;
let min_br=0
let step=30;
let window_size_lst=[];
let grph_color=[ 'red', 'green', 'blue', 'yellow', 'black'];
// let grph_color=[ '#ff000080', '#00aa0080', '#0000ff80', '#ffff0080', '#00000080'];

function nextColor()
{
    if(grph_color.length<1)
        return 'black';

    let c=grph_color[0];

    grph_color.shift();

    return c;
}

function width()
{
    return window.innerWidth
            || document.documentElement.clientWidth
            || document.body.clientWidth
            || 640;
}

function addText(id, x, y)
{
    let parent=document.getElementById('canvas');
    let obj=document.createElementNS('http://www.w3.org/2000/svg', 'text');

    obj.setAttribute('id', id);
    obj.setAttribute('x', x);
    obj.setAttribute('y', y);
    obj.setAttribute('font-weight', 'bold');
    obj.setAttribute('fill', 'white');
    obj.setAttribute('text-anchor', 'middle');

    obj.textContent='';

    parent.appendChild(obj);
}

function addPolyline(id, color)
{
    let parent=document.getElementById('canvas');
    let obj=document.createElementNS('http://www.w3.org/2000/svg', 'polyline');

    obj.setAttribute('id', id);
    obj.setAttribute('stroke-linejoin', 'round');
    obj.setAttribute('stroke-linecap', 'round');
    obj.setAttribute('stroke-width', 2);
    obj.setAttribute('stroke-opacity', 1);
    obj.setAttribute('fill', 'none');

    obj.setAttribute('stroke', color);

    parent.appendChild(obj);
}

function addCheckbox(id, title, color)
{
    let parent=document.getElementById('main');
    let obj=null;

    //

    // obj=document.createElement('br');
    // parent.appendChild(obj);

    //

    obj=document.createElement('input');

    obj.setAttribute('type', 'checkbox');
    obj.setAttribute('id', id);
    obj.setAttribute('checked', true);
    obj.setAttribute('onclick', 'updateGraphics();');


    parent.appendChild(obj);

    //

    obj=document.createElement('font');

    obj.textContent=title + '  ';
    obj.color=color;

    parent.appendChild(obj);

    //
}

function bringToTop(obj)
{
    let parent=obj.parentNode;
    parent.removeChild(obj);
    parent.appendChild(obj);
}

function checkZero(value)
{
    if(value.length!=2)
        return value;

    if(value[0]=='0')
        return value[1];

    return value;
}

function getTime(date)
{
    let result;


    if(date.getHours()<=9)
        result='0' + date.getHours() + ':'

    else
        result=date.getHours() + ':'


    if(date.getMinutes()<=9)
        result+='0' + date.getMinutes() + ':'

    else
        result+=date.getMinutes() + ':'


    if(date.getSeconds()<=9)
        result+='0' + date.getSeconds();

    else
        result+=date.getSeconds();


    return result;
}

function updateTimestamps(current_ts)
{
    ts_tmp=current_ts.split(':');

    let ts=new Date(1970, 1, 1, checkZero(ts_tmp[0]), checkZero(ts_tmp[1]), checkZero(ts_tmp[2].split('.')[0]), 0);

    let text_cntr=0;

    for(let i=graphic_width; i>0; i-=step) {
        text_cntr++;

        if(text_cntr==2) {
            let text=document.getElementById('text_' + i);

            let ts2=new Date(ts.getTime() - (graphic_width - i)*.5*1000.)


            if(ts2.getTime()>=2667600000) {
                text.textContent=getTime(ts2);

            } else {
                text.textContent='';
            }
        }

        if(text_cntr>=3) {
            text_cntr=0;
        }
    }
}

function gridPoints()
{
    let result='';

    let text_cntr=0;

    for(let i=graphic_width; i>0; i-=step) {
        result+=' ' + (i + step) + ',0 ' + i + ',0 ' + i + ',' + graphic_height;

        text_cntr++;

        if(text_cntr==2) {
            addText('text_' + i, i, graphic_height + 16);
        }

        if(text_cntr>=3) {
            text_cntr=0;
        }
    }

    result+=', '+ graphic_width + ' ' + graphic_height  +  ', 0 ' + graphic_height;

    return result;
}

function onLoad()
{
    if(window.location.href.split('?').length>1) {
        window.location.replace(location.pathname);
    }

    graphic_width=Math.round(width()*.9);
    graphic_height=Math.round(graphic_width*.24);

    document.getElementById('canvas').setAttribute('width', graphic_width);
    document.getElementById('canvas').setAttribute('height', graphic_height + 24);

    document.getElementById('grid').setAttribute('points', gridPoints());

    document.getElementById('text_bitrate_high').setAttribute('y', 20);
    document.getElementById('text_bitrate_low').setAttribute('y', graphic_height - 10);

    addPolyline('graphic_avg', 'magenta');
    addCheckbox('cb_graphic_avg', 'âˆž', 'magenta');

    loadData();

    setInterval('loadData()', 1000);
}

function objToMap(obj)
{
    let map=new Map();

    Object.keys(obj).forEach(key=>{
        map.set(key, obj[key]);
    });

    return map;
}

function updateGraphics()
{
    let arr_sum=[];

    while(bitrate_avg.length>graphic_width*.5)
        bitrate_avg.shift();

    if(document.getElementById('cb_graphic_avg').checked)
       arr_sum=arr_sum.concat(bitrate_avg);

    for(let i_grp=0; i_grp<window_size_lst.length; ++i_grp) {
        let arr=bitrate.get(window_size_lst[i_grp]);

        while(arr.length>graphic_width*.5)
            arr.shift();

        bitrate.set(window_size_lst[i_grp], arr);

        if(document.getElementById('cb_' + window_size_lst[i_grp]).checked)
            arr_sum=arr_sum.concat(arr);
    }


    if(arr_sum.length<1) {
        document.getElementById('text_bitrate_high').textContent=(0).toFixed(2);
        document.getElementById('text_bitrate_low').textContent=(0).toFixed(2);

        document.getElementById('graphic_avg').setAttribute('points', '');

        for(let i_grp=0; i_grp<window_size_lst.length; ++i_grp)
            document.getElementById('graphic_' + window_size_lst[i_grp]).setAttribute('points', '');

        return;
    }


    max_br=Math.max.apply(Math, arr_sum);
    min_br=Math.min.apply(Math, arr_sum);


    document.getElementById('text_bitrate_high').textContent=(max_br/1024./1024.).toFixed(2);
    document.getElementById('text_bitrate_low').textContent=(min_br/1024./1024.).toFixed(2);


    let kf=graphic_height/(max_br - min_br)*.95;
    let space=Math.round(graphic_height*.05*.5);

    let points='';

    if(document.getElementById('cb_graphic_avg').checked) {
        for(let i=0; i<bitrate_avg.length; ++i) {
            if(i!=0)
                points+=', ';

            let p=Math.round(kf*(bitrate_avg[i] - min_br));

            if(isNaN(p))
                p=0;

            points+=(graphic_width - bitrate_avg.length*2 + i*2) + ' ' + (graphic_height - p - space);
        }
    }

    document.getElementById('graphic_avg').setAttribute('points', points);


    for(let i_grp=0; i_grp<window_size_lst.length; ++i_grp) {
        if(!document.getElementById('cb_' + window_size_lst[i_grp]).checked) {
            document.getElementById('graphic_' + window_size_lst[i_grp]).setAttribute('points', '');
            continue;
        }

        points='';

        let arr=bitrate.get(window_size_lst[i_grp]);

        for(let i=0; i<arr.length; ++i) {
            if(i!=0)
                points+=', ';

            let p=Math.round(kf*(arr[i] - min_br));

            if(isNaN(p))
                p=0;

            points+=(graphic_width - arr.length*2 + i*2) + ' ' + (graphic_height - p - space);
        }

        document.getElementById('graphic_' + window_size_lst[i_grp]).setAttribute('points', points);
    }
}

function loadData()
{
    let request=new XMLHttpRequest();
    request.open('GET', 'http://' + window.location.host + '/data');

    request.onreadystatechange=function () {
        if(request.status!=200) {
            ;
        }
    }

    request.onload=function() {
        let data=JSON.parse(request.responseText);

        if(data.rec_stats.time===null) {
            if(window_size_lst[0]) {
                if(bitrate.get(window_size_lst[0]).length>0)
                    drop_data=true;
            }

        } else {
            if(drop_data) {
                drop_data=false;

                bitrate_avg=new Array;

                for(let i=0; i<window_size_lst.length; ++i) {
                    bitrate.set(window_size_lst[i], new Array);
                }
            }

            bitrate_avg.push(data.rec_stats.avg_bitrate/8);

            let bitrate_video=data.rec_stats.bitrate_video;

            last_timestamp=data.rec_stats.time.substring(0, 8);

            window_size_lst=[...objToMap(bitrate_video).keys()];

            let graphic_added=false;

            for(let i=0; i<window_size_lst.length; ++i) {
                let id='graphic_' + window_size_lst[i];
                let obj_graphic=document.getElementById(id);

                let color='black';

                if(!obj_graphic) {
                    color=nextColor();
                    addPolyline(id, color);

                    graphic_added=true;
                }

                if(!bitrate.has(window_size_lst[i])) {
                    bitrate.set(window_size_lst[i], new Array);

                    addCheckbox('cb_' + window_size_lst[i], window_size_lst[i], color);
                }

                let arr=bitrate.get(window_size_lst[i]);

                arr.push(bitrate_video[window_size_lst[i]]);

                bitrate.set(window_size_lst[i], arr);
            }

            if(graphic_added)
                bringToTop(document.getElementById('graphic_avg'));
        }
    };

    request.send();


    if(!window_size_lst[0]) {
        return;
    }


    updateGraphics();


    updateTimestamps(last_timestamp);
}
